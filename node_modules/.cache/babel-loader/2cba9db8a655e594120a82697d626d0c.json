{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ronan\\\\Source\\\\Repos\\\\seminar-webpage\\\\src\\\\MapChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = ({\n  setTooltipContent\n}) => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [estimates, setEstimates] = useState([]);\n  useEffect(() => {\n    csv(`/annual-change-forest-area.csv`).then(data => {\n      setData(data);\n    });\n    csv(`/livingplanet-index-by-region.csv`).then(data => {\n      setEstimates(estimates);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      \"data-tip\": \"\",\n      projectionConfig: {\n        scale: 200\n      },\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        children: /*#__PURE__*/_jsxDEV(Geographies, {\n          geography: geoUrl,\n          children: ({\n            geographies\n          }) => geographies.map(geo => {\n            const details = data.find(s => s.ISO3 === geo.properties.ISO_A3 && s.Year === \"2015\");\n            const est = estimates.find(s => s.Region === geo.properties.CONTINENT);\n            return /*#__PURE__*/_jsxDEV(Geography, {\n              geography: geo,\n              onMouseEnter: () => {\n                const {\n                  NAME,\n                  POP_EST\n                } = geo.properties;\n                details ? setTooltipContent(`${NAME}<br />\n                                                                         ------------<br />\n                                                                         Year: ${details[\"Year\"]}\n                                                                         Pop: ${est[\"Percent\"]}`) : setTooltipContent(`No data found for ${NAME}`);\n              },\n              onMouseLeave: () => {\n                setTooltipContent(\"\");\n              },\n              style: {\n                default: {\n                  fill: \"#D6D6DA\",\n                  outline: \"#000000\"\n                },\n                hover: {\n                  fill: \"#F53\",\n                  outline: \"#000000\"\n                },\n                pressed: {\n                  fill: \"#E42\",\n                  outline: \"#000000\"\n                }\n              }\n            }, geo.rsmKey, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(MapChart, \"DnwANhJHThmdzIiLDUZEhWyiOzs=\");\n\n_c = MapChart;\nexport default _c2 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/ronan/Source/Repos/seminar-webpage/src/MapChart.js"],"names":["React","memo","useEffect","useState","csv","ZoomableGroup","ComposableMap","Geographies","Geography","geoUrl","rounded","num","Math","round","MapChart","setTooltipContent","data","setData","estimates","setEstimates","then","scale","geographies","map","geo","details","find","s","ISO3","properties","ISO_A3","Year","est","Region","CONTINENT","NAME","POP_EST","default","fill","outline","hover","pressed","rsmKey"],"mappings":"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","sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\r\nimport { csv } from \"d3-fetch\";\r\nimport {\r\n    ZoomableGroup,\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst rounded = num => {\r\n    if (num > 1000000000) {\r\n        return Math.round(num / 100000000) / 10 + \"Bn\";\r\n    } else if (num > 1000000) {\r\n        return Math.round(num / 100000) / 10 + \"M\";\r\n    } else {\r\n        return Math.round(num / 100) / 10 + \"K\";\r\n    }\r\n};    \r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n\r\n        const [data, setData] = useState([]);\r\n        const [estimates, setEstimates] = useState([]);\r\n\r\n    useEffect(() => {\r\n        csv(`/annual-change-forest-area.csv`).then((data) => {\r\n            setData(data);\r\n        });\r\n        csv(`/livingplanet-index-by-region.csv`).then((data) => {\r\n            setEstimates(estimates);\r\n        })\r\n    },\r\n      []);\r\n\r\n    return (\r\n        <>\r\n            <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n                <ZoomableGroup>\r\n                    <Geographies geography={geoUrl}>\r\n                        {({ geographies }) =>\r\n                            geographies.map((geo) => {\r\n                                const details = data.find((s) => s.ISO3 === geo.properties.ISO_A3 && s.Year === \"2015\");\r\n                                const est = estimates.find((s) => s.Region === geo.properties.CONTINENT);\r\n                                return (\r\n                                    <Geography\r\n                                        key={geo.rsmKey}\r\n                                        geography={geo}\r\n                                        onMouseEnter={() => {\r\n                                            const { NAME, POP_EST } = geo.properties;\r\n                                            (details ? setTooltipContent(`${NAME}<br />\r\n                                                                         ------------<br />\r\n                                                                         Year: ${details[\"Year\"]}\r\n                                                                         Pop: ${est[\"Percent\"]}` )\r\n                                                : setTooltipContent(`No data found for ${NAME}`));\r\n                                        }}\r\n                                        onMouseLeave={() => {\r\n                                            setTooltipContent(\"\");\r\n                                        }}\r\n                                        style={{\r\n                                            default: {\r\n                                                fill: \"#D6D6DA\",\r\n                                                outline: \"#000000\",\r\n                                            },\r\n                                            hover: {\r\n                                                fill: \"#F53\",\r\n                                                outline: \"#000000\"\r\n                                            },\r\n                                            pressed: {\r\n                                                fill: \"#E42\",\r\n                                                outline: \"#000000\"\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                );\r\n                            })\r\n                        }\r\n                    </Geographies>\r\n                </ZoomableGroup>\r\n            </ComposableMap>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(MapChart);"]},"metadata":{},"sourceType":"module"}