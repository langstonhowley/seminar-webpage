{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ronan\\\\source\\\\repos\\\\seminar-webpage\\\\src\\\\MapChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport Slider from '@mui/material/Slider';\nimport Box from '@mui/material/Box';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst marks = [{\n  value: 1990,\n  label: 'yr1990'\n}, {\n  value: 2000,\n  label: 'yr2000'\n}, {\n  value: 2010,\n  label: 'yr2010'\n}, {\n  value: 2015,\n  label: 'yr2015'\n}, {\n  value: 2020,\n  label: 'yr2020'\n}];\n\nfunction valuetext(value) {\n  return `year ${value}`;\n}\n\nfunction valueLabelFormat(value) {\n  return marks.findIndex(mark => mark.value === value) + 1;\n}\n\nconst MapChart = ({\n  setTooltipContent\n}) => {\n  _s();\n\n  const [forestData, setForestData] = useState([]);\n  const [estimates, setEstimates] = useState([]);\n  useEffect(() => {\n    csv(`/annual-change-forest-area.csv`).then(forestData => {\n      setForestData(forestData);\n    });\n    csv(`/living-planet-index-by-region.csv`).then(estimates => {\n      setEstimates(estimates);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: 300\n    },\n    children: /*#__PURE__*/_jsxDEV(Slider, {\n      \"aria-label\": \"Restricted values\",\n      defaultValue: 2020,\n      valueLabelFormat: valueLabelFormat,\n      getAriaValueText: valuetext,\n      step: null,\n      valueLabelDisplay: \"auto\",\n      marks: marks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 13\n  }, this);\n};\n\n_s(MapChart, \"ZyuU0lJchnWhXD/gjhgdzO/ZsQM=\");\n\n_c = MapChart;\nexport default _c2 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/ronan/source/repos/seminar-webpage/src/MapChart.js"],"names":["React","memo","useEffect","useState","csv","ZoomableGroup","ComposableMap","Geographies","Geography","Slider","Box","geoUrl","rounded","num","Math","round","marks","value","label","valuetext","valueLabelFormat","findIndex","mark","MapChart","setTooltipContent","forestData","setForestData","estimates","setEstimates","then","width"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SACIC,aADJ,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,SAJJ,QAKO,mBALP;AAMA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;;AAEA,MAAMC,MAAM,GACR,wGADJ;;AAGA,MAAMC,OAAO,GAAGC,GAAG,IAAI;AACnB,MAAIA,GAAG,GAAG,UAAV,EAAsB;AAClB,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,SAAjB,IAA8B,EAA9B,GAAmC,IAA1C;AACH,GAFD,MAEO,IAAIA,GAAG,GAAG,OAAV,EAAmB;AACtB,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,MAAjB,IAA2B,EAA3B,GAAgC,GAAvC;AACH,GAFM,MAEA;AACH,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,GAAjB,IAAwB,EAAxB,GAA6B,GAApC;AACH;AACJ,CARD;;AAUA,MAAMG,KAAK,GAAG,CACV;AACIC,EAAAA,KAAK,EAAE,IADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CADU,EAKV;AACID,EAAAA,KAAK,EAAE,IADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CALU,EASV;AACID,EAAAA,KAAK,EAAE,IADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CATU,EAaV;AACID,EAAAA,KAAK,EAAE,IADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CAbU,EAiBV;AACID,EAAAA,KAAK,EAAE,IADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CAjBU,CAAd;;AAuBA,SAASC,SAAT,CAAmBF,KAAnB,EAA0B;AACtB,SAAQ,QAAOA,KAAM,EAArB;AACH;;AAED,SAASG,gBAAT,CAA0BH,KAA1B,EAAiC;AAC7B,SAAOD,KAAK,CAACK,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACL,KAAL,KAAeA,KAAzC,IAAkD,CAAzD;AACH;;AAED,MAAMM,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA2B;AAAA;;AAEpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACwB,SAAD,EAAYC,YAAZ,IAA4BzB,QAAQ,CAAC,EAAD,CAA1C;AAEJD,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,GAAG,CAAE,gCAAF,CAAH,CAAsCyB,IAAtC,CAA4CJ,UAAD,IAAgB;AACvDC,MAAAA,aAAa,CAACD,UAAD,CAAb;AACH,KAFD;AAGArB,IAAAA,GAAG,CAAE,oCAAF,CAAH,CAA0CyB,IAA1C,CAAgDF,SAAD,IAAe;AAC1DC,MAAAA,YAAY,CAACD,SAAD,CAAZ;AACH,KAFD;AAGH,GAPQ,EAQP,EARO,CAAT;AAUA,sBACQ,QAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAAT;AAAA,2BACA,QAAC,MAAD;AACI,oBAAW,mBADf;AAEI,MAAA,YAAY,EAAE,IAFlB;AAGI,MAAA,gBAAgB,EAAEV,gBAHtB;AAII,MAAA,gBAAgB,EAAED,SAJtB;AAKI,MAAA,IAAI,EAAE,IALV;AAMI,MAAA,iBAAiB,EAAC,MANtB;AAOI,MAAA,KAAK,EAAEH;AAPX;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADR;AAaH,CA5BD;;GAAMO,Q;;KAAAA,Q;AA8BN,kCAAetB,IAAI,CAACsB,QAAD,CAAnB","sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\r\nimport { csv } from \"d3-fetch\";\r\nimport {\r\n    ZoomableGroup,\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography\r\n} from \"react-simple-maps\";\r\nimport Slider from '@mui/material/Slider';\r\nimport Box from '@mui/material/Box';\r\n\r\nconst geoUrl =\r\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst rounded = num => {\r\n    if (num > 1000000000) {\r\n        return Math.round(num / 100000000) / 10 + \"Bn\";\r\n    } else if (num > 1000000) {\r\n        return Math.round(num / 100000) / 10 + \"M\";\r\n    } else {\r\n        return Math.round(num / 100) / 10 + \"K\";\r\n    }\r\n}; \r\n\r\nconst marks = [\r\n    {\r\n        value: 1990,\r\n        label: 'yr1990',\r\n    },\r\n    {\r\n        value: 2000,\r\n        label: 'yr2000',\r\n    },\r\n    {\r\n        value: 2010,\r\n        label: 'yr2010',\r\n    },\r\n    {\r\n        value: 2015,\r\n        label: 'yr2015',\r\n    },\r\n    {\r\n        value: 2020,\r\n        label: 'yr2020',\r\n    },\r\n];\r\n\r\nfunction valuetext(value) {\r\n    return `year ${value}`;\r\n}\r\n\r\nfunction valueLabelFormat(value) {\r\n    return marks.findIndex((mark) => mark.value === value) + 1;\r\n}\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n\r\n        const [forestData, setForestData] = useState([]);\r\n        const [estimates, setEstimates] = useState([]);\r\n\r\n    useEffect(() => {\r\n        csv(`/annual-change-forest-area.csv`).then((forestData) => {\r\n            setForestData(forestData);\r\n        });\r\n        csv(`/living-planet-index-by-region.csv`).then((estimates) => {\r\n            setEstimates(estimates);\r\n        })\r\n    },\r\n      []);\r\n\r\n    return (\r\n            <Box sx={{ width: 300 }}>\r\n            <Slider\r\n                aria-label=\"Restricted values\"\r\n                defaultValue={2020}\r\n                valueLabelFormat={valueLabelFormat}\r\n                getAriaValueText={valuetext}\r\n                step={null}\r\n                valueLabelDisplay=\"auto\"\r\n                marks={marks}\r\n                />\r\n            </Box>\r\n    );\r\n};\r\n\r\nexport default memo(MapChart);"]},"metadata":{},"sourceType":"module"}